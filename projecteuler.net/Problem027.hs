module Problem027 where

import Data.Numbers.Primes
import Data.List
import Data.Array

answer = [ (length $ numbers a b, a * b, a, b) | a <- [-l..l], b <- [2..l] ]
	where l = 999

-- Number of primes generated by n^2 + an + b
numbers a b
	| isPrime b = takeWhile isPrime [ n*(n + a) + b | n <- [0..] ]
	| otherwise = []

isPrime n
	| n <= 1 = False
	| otherwise = all (\p -> n `mod` p /= 0) [2..(ceiling . sqrt . fromIntegral) n]

-- From internets, I do not understand this problem at all. WTF?
-- AHA! Stupid, stupid me. When x < 0 we don't have an increasing function. So
-- can't check prime thing with solen.
problem_27 = -(2*a-1)*(a^2-a+41)
  where n = 1000
        m = head $ filter (\x->x^2-x+41>n) [1..]
        a = m-1

main = do
	print problem_27
	print . maximum $ answer
